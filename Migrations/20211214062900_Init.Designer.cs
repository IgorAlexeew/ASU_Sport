// <auto-generated />
using System;
using ASUSport.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ASUSport.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211214062900_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ASUSport.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ASUSport.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ASUSport.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "client"
                        },
                        new
                        {
                            Id = 3,
                            Name = "trainer"
                        });
                });

            modelBuilder.Entity("ASUSport.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("SportObjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SportObjectId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 0,
                            Name = "Свободное плавание",
                            SportObjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration = 0,
                            Name = "Плавание с тренером",
                            SportObjectId = 1
                        });
                });

            modelBuilder.Entity("ASUSport.Models.SportObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("ClosingTime")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StartingTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SportObjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 64,
                            ClosingTime = "22:00",
                            Name = "Бассейн",
                            StartingTime = "07:00"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 0,
                            Name = "Мини футбольное поле"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 0,
                            ClosingTime = "21:00",
                            Name = "Тренажерный зал",
                            StartingTime = "09:00"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 0,
                            Name = "Баскетбольная площадка"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 0,
                            Name = "Волейбольная площадка"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 0,
                            Name = "Площадка для бадминтона"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 0,
                            Name = "Волейбольный, баскетбольный зал"
                        });
                });

            modelBuilder.Entity("ASUSport.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClosingTime")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumOfVisits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("SportObjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StartingTime")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SportObjectId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 100,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 2,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 400,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Разовое персональное занятие с тренером"
                        },
                        new
                        {
                            Id = 3,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 300,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Разовое групповое занятие с тренером"
                        },
                        new
                        {
                            Id = 4,
                            ClosingTime = "21:00",
                            NumOfVisits = 8,
                            Price = 1200,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент на персональные занятия с тренером"
                        },
                        new
                        {
                            Id = 5,
                            ClosingTime = "21:00",
                            NumOfVisits = 8,
                            Price = 600,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент на занятия 2 раза в неделю"
                        },
                        new
                        {
                            Id = 6,
                            ClosingTime = "21:00",
                            NumOfVisits = 12,
                            Price = 1000,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент на занятия 3 раза в неделю"
                        },
                        new
                        {
                            Id = 7,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 800,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент безлимитный (с 10:00 до 17:00)"
                        },
                        new
                        {
                            Id = 8,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 1500,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент безлимитный (с 10:00 до 22:00)"
                        },
                        new
                        {
                            Id = 9,
                            ClosingTime = "21:00",
                            NumOfVisits = 12,
                            Price = 375,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент \"Студенческий\" 3 раза в неделю"
                        },
                        new
                        {
                            Id = 10,
                            ClosingTime = "21:00",
                            NumOfVisits = 0,
                            Price = 500,
                            SportObjectId = 3,
                            StartingTime = "09:00",
                            Type = "Абонемент \"Студенческий\" безлимитный"
                        },
                        new
                        {
                            Id = 11,
                            ClosingTime = "22:00",
                            Name = "Для граждан",
                            NumOfVisits = 0,
                            Price = 200,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 12,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 0,
                            Price = 150,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 13,
                            ClosingTime = "22:00",
                            Name = "Для пенсионеров при предъявлении пенсионного удостоверения",
                            NumOfVisits = 1,
                            Price = 150,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 14,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 0,
                            Price = 150,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 15,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 8,
                            Price = 700,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 16,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 8,
                            Price = 1400,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 17,
                            ClosingTime = "22:00",
                            Name = "Для пенсионеров при предъявлении пенсионного удостоверения",
                            NumOfVisits = 8,
                            Price = 1000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 18,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 8,
                            Price = 800,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 19,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 8,
                            Price = 800,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 20,
                            ClosingTime = "22:00",
                            Name = "Для членов профсоюза",
                            NumOfVisits = 8,
                            Price = 600,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"8 раз в месяц\""
                        },
                        new
                        {
                            Id = 21,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 12,
                            Price = 1100,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"12 раз в месяц\""
                        },
                        new
                        {
                            Id = 22,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 12,
                            Price = 2200,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"12 раз в месяц\""
                        },
                        new
                        {
                            Id = 23,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 12,
                            Price = 1200,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"12 раз в месяц\""
                        },
                        new
                        {
                            Id = 24,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 12,
                            Price = 1200,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"12 раз в месяц\""
                        },
                        new
                        {
                            Id = 25,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 0,
                            Price = 1800,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на месяц\""
                        },
                        new
                        {
                            Id = 26,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 0,
                            Price = 3600,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на месяц\""
                        },
                        new
                        {
                            Id = 27,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 0,
                            Price = 2400,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на месяц\""
                        },
                        new
                        {
                            Id = 28,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 0,
                            Price = 2400,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на месяц\""
                        },
                        new
                        {
                            Id = 29,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 0,
                            Price = 15000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на год\""
                        },
                        new
                        {
                            Id = 30,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 0,
                            Price = 30000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на год\""
                        },
                        new
                        {
                            Id = 31,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 0,
                            Price = 20000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на год\""
                        },
                        new
                        {
                            Id = 32,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 0,
                            Price = 20000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на год\""
                        },
                        new
                        {
                            Id = 33,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 0,
                            Price = 9000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на полгода\""
                        },
                        new
                        {
                            Id = 34,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 0,
                            Price = 18000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на полгода\""
                        },
                        new
                        {
                            Id = 35,
                            ClosingTime = "22:00",
                            Name = "Для детей (7-14 лет)",
                            NumOfVisits = 0,
                            Price = 11000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на полгода\""
                        },
                        new
                        {
                            Id = 36,
                            ClosingTime = "22:00",
                            Name = "Для студентов очной формы обучения",
                            NumOfVisits = 0,
                            Price = 11000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Безлимитный на полгода\""
                        },
                        new
                        {
                            Id = 37,
                            ClosingTime = "22:00",
                            Name = "8 раз в месяц",
                            NumOfVisits = 0,
                            Price = 2000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 1 взрослый и ребенок\""
                        },
                        new
                        {
                            Id = 38,
                            ClosingTime = "22:00",
                            Name = "12 раз в месяц",
                            NumOfVisits = 0,
                            Price = 3000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 1 взрослый и ребенок\""
                        },
                        new
                        {
                            Id = 39,
                            ClosingTime = "22:00",
                            Name = "24 раз в месяц",
                            NumOfVisits = 0,
                            Price = 6000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 1 взрослый и ребенок\""
                        },
                        new
                        {
                            Id = 40,
                            ClosingTime = "22:00",
                            Name = "8 раз в месяц",
                            NumOfVisits = 0,
                            Price = 3200,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 2 взрослых и ребенок\""
                        },
                        new
                        {
                            Id = 41,
                            ClosingTime = "22:00",
                            Name = "12 раз в месяц",
                            NumOfVisits = 0,
                            Price = 4800,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 2 взрослых и ребенок\""
                        },
                        new
                        {
                            Id = 42,
                            ClosingTime = "22:00",
                            Name = "24 раз в месяц",
                            NumOfVisits = 0,
                            Price = 9600,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Семейный, 2 взрослых и ребенок\""
                        },
                        new
                        {
                            Id = 43,
                            ClosingTime = "22:00",
                            Name = "Для сотрудников университета",
                            NumOfVisits = 0,
                            Price = 300,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Утренние часы\""
                        },
                        new
                        {
                            Id = 44,
                            ClosingTime = "22:00",
                            Name = "Для других категорий граждан",
                            NumOfVisits = 0,
                            Price = 600,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Абонемент \"Утренние часы\""
                        },
                        new
                        {
                            Id = 45,
                            ClosingTime = "22:00",
                            Name = "Разовое занятие",
                            NumOfVisits = 0,
                            Price = 500,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость персональных тренировок с тренером на воде"
                        },
                        new
                        {
                            Id = 46,
                            ClosingTime = "22:00",
                            Name = "8 раз в месяц",
                            NumOfVisits = 0,
                            Price = 3500,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость персональных тренировок с тренером на воде"
                        },
                        new
                        {
                            Id = 47,
                            ClosingTime = "22:00",
                            Name = "Разовое занятие",
                            NumOfVisits = 0,
                            Price = 350,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость групповых занятий с тренером на воде"
                        },
                        new
                        {
                            Id = 48,
                            ClosingTime = "22:00",
                            Name = "Разовое занятие при посещении группой свыше 10 человек",
                            NumOfVisits = 0,
                            Price = 250,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость групповых занятий с тренером на воде"
                        },
                        new
                        {
                            Id = 49,
                            ClosingTime = "22:00",
                            Name = "8 раз в месяц",
                            NumOfVisits = 0,
                            Price = 2000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость групповых занятий с тренером на воде"
                        },
                        new
                        {
                            Id = 50,
                            ClosingTime = "22:00",
                            Name = "12 раз в месяц",
                            NumOfVisits = 0,
                            Price = 2500,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Стоимость групповых занятий с тренером на воде"
                        },
                        new
                        {
                            Id = 51,
                            ClosingTime = "22:00",
                            NumOfVisits = 0,
                            Price = 2000,
                            SportObjectId = 1,
                            StartingTime = "07:00",
                            Type = "Коммерческие договоры (1 дорожка на 1 час)"
                        },
                        new
                        {
                            Id = 52,
                            NumOfVisits = 0,
                            Price = 600,
                            SportObjectId = 2,
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 53,
                            NumOfVisits = 0,
                            Price = 500,
                            SportObjectId = 4,
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 54,
                            NumOfVisits = 0,
                            Price = 500,
                            SportObjectId = 5,
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 55,
                            NumOfVisits = 0,
                            Price = 250,
                            SportObjectId = 6,
                            Type = "Разовое занятие"
                        },
                        new
                        {
                            Id = 56,
                            NumOfVisits = 0,
                            Price = 1000,
                            SportObjectId = 7,
                            Type = "Разовое занятие"
                        });
                });

            modelBuilder.Entity("ASUSport.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("ASUSport.Models.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("integer");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("ClientsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventsUsers");
                });

            modelBuilder.Entity("SubscriptionUser", b =>
                {
                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("SubscriptionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SubscriptionsUsers");
                });

            modelBuilder.Entity("ASUSport.Models.Event", b =>
                {
                    b.HasOne("ASUSport.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("ASUSport.Models.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");

                    b.Navigation("Section");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("ASUSport.Models.Section", b =>
                {
                    b.HasOne("ASUSport.Models.SportObject", "SportObject")
                        .WithMany()
                        .HasForeignKey("SportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportObject");
                });

            modelBuilder.Entity("ASUSport.Models.Subscription", b =>
                {
                    b.HasOne("ASUSport.Models.SportObject", "SportObject")
                        .WithMany()
                        .HasForeignKey("SportObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportObject");
                });

            modelBuilder.Entity("ASUSport.Models.User", b =>
                {
                    b.HasOne("ASUSport.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ASUSport.Models.UserData", b =>
                {
                    b.HasOne("ASUSport.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("ASUSport.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASUSport.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubscriptionUser", b =>
                {
                    b.HasOne("ASUSport.Models.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASUSport.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
